use iced::{
    Color, Point, Size,
    widget::canvas::{self, Path, Stroke, path::lyon_path::geom::euclid::default::Transform2D},
};

fn get_path(data: &str) -> Path {
    let path = Path::new(|p| {
        let mut nums = Vec::new();
        let mut cmd = None;

        for token in data.split_whitespace() {
            match token {
                "M" | "L" | "C" | "Q" | "Z" => {
                    if token != "Z" {
                        cmd = Some(token);
                        nums.clear();
                    } else {
                        p.close();
                        cmd = None;
                    }
                }
                _ => {
                    nums.push(token.parse::<f64>().unwrap());

                    match cmd {
                        Some("M") if nums.len() == 2 => {
                            let pos = Point::new(nums[0] as f32, nums[1] as f32);
                            p.move_to(pos);
                            nums.clear();
                        }
                        Some("L") if nums.len() == 2 => {
                            let pos = Point::new(nums[0] as f32, nums[1] as f32);
                            p.line_to(pos);
                            nums.clear();
                        }
                        Some("C") if nums.len() == 6 => {
                            let pos = Point::new(nums[4] as f32, nums[5] as f32);
                            p.bezier_curve_to(
                                Point::new(nums[0] as f32, nums[1] as f32),
                                Point::new(nums[2] as f32, nums[3] as f32),
                                pos,
                            );
                            nums.clear();
                        }
                        Some("Q") if nums.len() == 4 => {
                            let pos = Point::new(nums[2] as f32, nums[3] as f32);
                            p.quadratic_curve_to(Point::new(nums[0] as f32, nums[1] as f32), pos);
                            nums.clear();
                        }
                        _ => {}
                    }
                }
            }
        }
    });

    path
}

#[derive(Debug, Default, Clone, Copy)]
pub struct Glyph {
    path: &'static str,
    size: Size,
}

const NA: Glyph = Glyph {
    path: "M 248 576 Q 192 576 146.0 556.5 Q 100 537 73.0 498.5 Q 46 460 46 406 Q 46 358 65.0 328.5 Q 84 299 115.5 282.0 Q 147 265 184.5 256.5 Q 222 248 260 243 Q 309 237 340.0 233.5 Q 371 230 385.5 221.5 Q 400 213 400 193 L 400 190 Q 400 155 387.5 131.0 Q 375 107 349.5 94.5 Q 324 82 286 82 Q 247 82 219.5 94.0 Q 192 106 174.5 124.5 Q 157 143 148 162 L 62 134 Q 85 82 123.0 53.5 Q 161 25 207.0 12.5 Q 253 0 299 0 Q 328 0 365.5 7.0 Q 403 14 438.0 34.5 Q 473 55 495.5 95.0 Q 518 135 518 201 L 518 576 L 431 576 L 431 485 L 424 485 Q 415 505 392.5 526.5 Q 370 548 334.0 562.0 Q 298 576 248 576 Z M 261 494 Q 316 494 353.5 475.0 Q 391 456 410.5 425.0 Q 430 394 430 361 L 430 285 Q 424 291 404.0 296.0 Q 384 301 358.5 305.0 Q 333 309 308.5 312.0 Q 284 315 269 316 Q 234 320 203.5 329.5 Q 173 339 154.0 357.5 Q 135 376 135 408 Q 135 436 152.0 455.5 Q 169 475 196.5 484.5 Q 224 494 261 494 Z",
    size: Size::new(576.0, 576.0),
};
const NB: Glyph = Glyph {
    path: "M 295 512 Q 245 512 214.0 493.5 Q 183 475 167.0 452.0 Q 151 429 142 413 L 132 413 L 132 512 L 46 512 L 46 -256 L 135 -256 L 135 34 L 142 34 Q 150 19 166.0 -4.0 Q 182 -27 212.5 -45.5 Q 243 -64 294 -64 Q 360 -64 410.0 -29.0 Q 460 6 489.0 70.5 Q 518 135 518 223 Q 518 312 489.5 376.5 Q 461 441 411.0 476.5 Q 361 512 295 512 Z M 282 430 Q 331 430 364.0 402.5 Q 397 375 413.5 327.5 Q 430 280 430 222 Q 430 165 413.5 118.5 Q 397 72 364.0 45.0 Q 331 18 282 18 Q 234 18 201.5 44.0 Q 169 70 152.0 115.5 Q 135 161 135 222 Q 135 283 152.0 330.5 Q 169 378 202.0 404.0 Q 235 430 282 430 Z",
    size: Size::new(576.0, 576.0),
};
const NC: Glyph = Glyph {
    path: "M 294 512 Q 220 512 164.0 476.0 Q 108 440 77.0 375.5 Q 46 311 46 225 Q 46 138 77.0 73.0 Q 108 8 164.0 -28.0 Q 220 -64 294 -64 Q 334 -64 369.0 -53.0 Q 404 -42 433.0 -22.5 Q 462 -3 483.0 25.5 Q 504 54 516 91 L 431 115 Q 425 94 413.0 76.5 Q 401 59 383.5 46.0 Q 366 33 343.5 25.5 Q 321 18 294 18 Q 240 18 204.5 47.0 Q 169 76 152.0 123.0 Q 135 170 135 225 Q 135 279 152.0 326.0 Q 169 373 204.5 401.5 Q 240 430 294 430 Q 322 430 345.0 422.5 Q 368 415 385.5 401.5 Q 403 388 415.5 369.0 Q 428 350 433 328 L 517 352 Q 507 391 485.5 420.0 Q 464 449 435.0 469.5 Q 406 490 370.0 501.0 Q 334 512 294 512 Z",
    size: Size::new(576.0, 576.0),
};
const ND: Glyph = Glyph {
    path: "M 272 512 Q 206 512 154.5 476.5 Q 103 441 74.5 376.5 Q 46 312 46 223 Q 46 135 75.0 70.5 Q 104 6 155.5 -29.0 Q 207 -64 274 -64 Q 326 -64 357.5 -45.5 Q 389 -27 405.5 -4.0 Q 422 19 430 34 L 430 34 L 430 -256 L 518 -256 L 518 512 L 436 512 L 436 413 L 427 413 Q 419 429 402.0 452.0 Q 385 475 354.0 493.5 Q 323 512 272 512 Z M 283 430 Q 331 430 363.5 404.0 Q 396 378 413.0 330.5 Q 430 283 430 222 Q 430 161 413.5 115.5 Q 397 70 364.0 44.0 Q 331 18 283 18 Q 234 18 201.0 45.0 Q 168 72 151.5 118.5 Q 135 165 135 222 Q 135 280 152.0 327.5 Q 169 375 202.0 402.5 Q 235 430 283 430 Z",
    size: Size::new(576.0, 576.0),
};
const NE: Glyph = Glyph {
    path: "M 296 512 Q 219 512 163.0 476.0 Q 107 440 76.5 376.0 Q 46 312 46 226 Q 46 141 75.5 75.5 Q 105 10 159.0 -27.0 Q 213 -64 285 -64 Q 328 -64 369.5 -48.5 Q 411 -33 444.5 2.0 Q 478 37 498.0 93.5 Q 518 150 518 232 L 518 271 L 106 271 L 106 189 L 471 189 L 430 219 Q 430 160 413.5 114.5 Q 397 69 365.5 43.5 Q 334 18 285 18 Q 238 18 204.5 42.0 Q 171 66 153.0 105.5 Q 135 145 135 190 L 135 240 Q 135 301 155.5 343.5 Q 176 386 212.0 408.0 Q 248 430 296 430 Q 327 430 353.0 422.0 Q 379 414 397.0 396.5 Q 415 379 425 354 L 509 376 Q 497 416 467.5 447.0 Q 438 478 394.5 495.0 Q 351 512 296 512 Z",
    size: Size::new(576.0, 576.0),
};
const NF: Glyph = Glyph {
    path: "M 325 -64 L 325 18 L 3 18 L 3 -64 L 325 -64 Z M 110 512 L 110 -112 Q 110 -160 132.5 -192.0 Q 155 -224 190.5 -240.0 Q 226 -256 266 -256 Q 298 -256 318.5 -251.0 Q 339 -246 348 -241 L 324 -167 Q 317 -169 306.0 -171.5 Q 295 -174 277 -174 Q 236 -174 217.5 -153.0 Q 199 -132 199 -93 L 199 512 L 110 512 Z",
    size: Size::new(576.0, 576.0),
};
const NG: Glyph = Glyph {
    path: "M 287 704 Q 228 704 185.0 689.0 Q 142 674 114.0 649.5 Q 86 625 69 596 L 140 562 Q 151 573 167.5 587.5 Q 184 602 212.0 612.0 Q 240 622 286 622 Q 350 622 390.0 595.0 Q 430 568 430 510 L 430 416 L 422 416 Q 414 432 397.5 455.0 Q 381 478 350.5 495.0 Q 320 512 268 512 Q 206 512 155.0 479.0 Q 104 446 75.0 383.0 Q 46 320 46 230 Q 46 140 74.5 74.0 Q 103 8 154.0 -28.0 Q 205 -64 270 -64 Q 322 -64 352.0 -46.0 Q 382 -28 398.5 -4.0 Q 415 20 424 35 L 432 35 L 432 -64 L 518 -64 L 518 501 Q 518 571 487.5 616.0 Q 457 661 404.5 682.5 Q 352 704 287 704 Z M 284 430 Q 332 430 364.5 406.0 Q 397 382 413.5 336.5 Q 430 291 430 228 Q 430 166 414.0 119.0 Q 398 72 365.0 45.0 Q 332 18 284 18 Q 234 18 201.0 46.5 Q 168 75 151.5 122.0 Q 135 169 135 228 Q 135 288 151.5 333.5 Q 168 379 201.5 404.5 Q 235 430 284 430 Z",
    size: Size::new(576.0, 576.0),
};
const NH: Glyph = Glyph {
    path: "M 135 170 L 135 512 L 46 512 L 46 -256 L 135 -256 L 135 64 L 120 64 Q 143 -6 185.0 -35.0 Q 227 -64 284 -64 Q 335 -64 373.5 -40.0 Q 412 -16 433.0 31.5 Q 454 79 454 151 L 454 512 L 366 512 L 366 158 Q 366 92 337.0 55.0 Q 308 18 257 18 Q 223 18 195.0 35.5 Q 167 53 151.0 87.0 Q 135 121 135 170 Z",
    size: Size::new(576.0, 576.0),
};

const N1: Glyph = Glyph {
    path: "M 327 0 L 327 768 L 238 768 L 238 91 L 233 91 L 46 228 L 46 123 L 214 0 L 327 0 Z",
    size: Size::new(576.0, 768.0),
};
const N2: Glyph = Glyph {
    path: "M 46 768 L 46 703 L 302 427 Q 344 380 372.5 345.5 Q 401 311 415.5 279.5 Q 430 248 430 212 Q 430 172 410.5 142.5 Q 391 113 358.0 97.5 Q 325 82 283 82 Q 237 82 204.0 99.5 Q 171 117 153.0 149.5 Q 135 182 135 225 L 46 225 Q 46 158 77.5 107.0 Q 109 56 162.5 28.0 Q 216 0 285 0 Q 353 0 405.5 28.5 Q 458 57 488.0 105.5 Q 518 154 518 215 Q 518 256 503.0 295.5 Q 488 335 450.5 385.0 Q 413 435 344 507 L 175 686 L 175 686 L 518 686 L 518 768 L 46 768 Z",
    size: Size::new(576.0, 768.0),
};
const N3: Glyph = Glyph {
    path: "M 282 768 Q 214 768 161.0 742.0 Q 108 716 77.0 670.0 Q 46 624 46 563 L 140 563 Q 143 601 162.0 628.5 Q 181 656 212.5 671.0 Q 244 686 284 686 Q 326 686 359.0 668.5 Q 392 651 411.0 619.5 Q 430 588 430 546 Q 430 503 412.5 469.5 Q 395 436 361.0 417.5 Q 327 399 277 399 L 224 399 L 224 317 L 284 317 Q 328 317 360.5 302.0 Q 393 287 411.5 260.5 Q 430 234 430 198 Q 430 162 414.0 136.5 Q 398 111 368.5 96.5 Q 339 82 298 82 Q 261 82 228.0 95.0 Q 195 108 173.5 132.0 Q 152 156 151 190 L 46 190 Q 46 133 79.5 90.5 Q 113 48 168.5 24.0 Q 224 0 290 0 Q 361 0 412.5 27.0 Q 464 54 491.5 98.0 Q 519 142 519 192 Q 519 253 487.0 295.0 Q 455 337 400 353 L 400 359 Q 438 367 464.0 393.0 Q 490 419 504.0 458.0 Q 518 497 518 546 Q 518 610 487.5 660.0 Q 457 710 403.0 739.0 Q 349 768 282 768 Z",
    size: Size::new(576.0, 768.0),
};
const N4: Glyph = Glyph {
    path: "M 78 591 L 78 518 L 405 0 L 462 0 L 462 82 L 424 82 L 180 509 L 180 509 L 617 509 L 617 591 L 78 591 Z M 430 768 L 430 589 L 430 550 L 430 0 L 519 0 L 519 768 L 430 768 Z",
    size: Size::new(576.0, 768.0),
};
const N5: Glyph = Glyph {
    path: "M 274 768 Q 209 768 158.0 741.5 Q 107 715 76.5 669.5 Q 46 624 46 565 L 136 565 Q 139 599 158.0 627.0 Q 177 655 208.0 670.5 Q 239 686 276 686 Q 321 686 356.0 664.0 Q 391 642 410.5 602.5 Q 430 563 430 513 Q 430 462 409.0 421.5 Q 388 381 352.0 358.0 Q 316 335 270 335 Q 235 335 200.0 346.5 Q 165 358 144 376 L 56 365 L 100 0 L 486 0 L 486 82 L 179 82 L 154 296 L 158 296 Q 180 277 214.5 265.0 Q 249 253 286 253 Q 336 253 379.0 272.5 Q 422 292 453.0 326.5 Q 484 361 501.5 408.5 Q 519 456 519 512 Q 519 586 487.0 644.0 Q 455 702 400.0 735.0 Q 345 768 274 768 Z",
    size: Size::new(576.0, 768.0),
};
const N6: Glyph = Glyph {
    path: "M 286 768 Q 244 768 201.0 751.0 Q 158 734 122.5 693.5 Q 87 653 66.5 584.5 Q 46 516 46 413 Q 46 314 63.0 237.5 Q 80 161 113.0 107.5 Q 146 54 192.5 27.0 Q 239 0 297 0 Q 355 0 400.0 24.0 Q 445 48 474.5 90.0 Q 504 132 512 188 L 424 188 Q 413 143 381.5 112.5 Q 350 82 299 82 Q 248 82 211.0 114.5 Q 174 147 154.5 207.0 Q 135 267 135 352 L 141 352 Q 159 321 184.5 299.0 Q 210 277 241.0 265.0 Q 272 253 307 253 Q 364 253 412.5 285.5 Q 461 318 489.5 376.0 Q 518 434 518 508 Q 518 580 489.5 639.5 Q 461 699 409.0 733.5 Q 357 768 286 768 Z M 282 686 Q 323 686 357.0 662.0 Q 391 638 410.5 598.5 Q 430 559 430 508 Q 430 460 411.0 420.5 Q 392 381 359.0 358.0 Q 326 335 284 335 Q 253 335 226.0 349.0 Q 199 363 178.5 387.5 Q 158 412 146.5 443.5 Q 135 475 135 509 Q 135 556 154.0 596.5 Q 173 637 206.5 661.5 Q 240 686 282 686 Z",
    size: Size::new(576.0, 768.0),
};
const N7: Glyph = Glyph {
    path: "M 111 768 L 419 82 L 419 82 L 64 82 L 64 0 L 512 0 L 512 84 L 204 768 L 111 768 Z",
    size: Size::new(576.0, 768.0),
};
const N8: Glyph = Glyph {
    path: "M 282 768 Q 212 768 159.0 740.5 Q 106 713 76.0 664.0 Q 46 615 46 552 Q 46 503 61.0 461.0 Q 76 419 102.5 391.0 Q 129 363 163 355 L 163 351 Q 109 338 77.5 293.0 Q 46 248 46 191 Q 46 136 76.5 92.5 Q 107 49 160.0 24.5 Q 213 0 282 0 Q 350 0 403.5 24.5 Q 457 49 487.5 92.5 Q 518 136 518 191 Q 518 248 486.0 293.0 Q 454 338 402 351 L 402 355 Q 435 363 461.0 391.0 Q 487 419 502.5 461.0 Q 518 503 518 552 Q 518 615 487.5 664.0 Q 457 713 404.0 740.5 Q 351 768 282 768 Z M 283 686 Q 328 686 361.0 669.0 Q 394 652 412.0 621.0 Q 430 590 430 549 Q 430 504 411.0 470.5 Q 392 437 358.5 418.0 Q 325 399 283 399 Q 240 399 206.5 418.0 Q 173 437 154.0 470.5 Q 135 504 135 549 Q 135 590 153.0 621.0 Q 171 652 204.0 669.0 Q 237 686 283 686 Z M 282 317 Q 325 317 358.0 302.0 Q 391 287 410.5 260.5 Q 430 234 430 199 Q 430 162 411.5 136.5 Q 393 111 360.0 96.5 Q 327 82 282 82 Q 237 82 204.0 96.5 Q 171 111 152.5 136.5 Q 134 162 134 199 Q 134 234 152.5 260.5 Q 171 287 205.0 302.0 Q 239 317 282 317 Z",
    size: Size::new(576.0, 768.0),
};

pub const ROW: &[Glyph] = &[N1, N2, N3, N4, N5, N6, N7, N8];
pub const COL: &[Glyph] = &[NA, NB, NC, ND, NE, NF, NG, NH];

pub fn draw(
    frame: &mut canvas::Frame,
    glyph: &Glyph,
    size: f32,
    offset: Point,
    color: Color,
    ofsx: bool,
    ofsy: bool,
) {
    let scale = size / 768.0;
    let mut translation = Transform2D::new(scale, 0.0, 0.0, scale, offset.x, offset.y);

    let mut path = get_path(glyph.path);
    let sizer = glyph.size * scale;

    if ofsx {
        translation.m31 -= sizer.width;
    }
    if ofsy {
        translation.m32 -= sizer.height;
    }

    path = path.transform(&translation);
    frame.fill(&path, color);
    frame.stroke(&path, Stroke::default().with_width(0.6).with_color(color));
}
